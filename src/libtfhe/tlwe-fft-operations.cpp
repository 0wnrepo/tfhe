#ifndef TFHE_TEST_ENVIRONMENT
/* ***************************************************
   TLWE fft operations
 *************************************************** */

#include <random>
#include <cassert>
#include "tfhe_core.h"
#include "numeric_functions.h"
#include "lweparams.h"
#include "lwekey.h"
#include "lwesamples.h"
#include "lwe-functions.h"
#include "tlwe_functions.h"
#include "tgsw_functions.h"
#include "polynomials_arithmetic.h"
#include "lagrangehalfc_arithmetic.h"

using namespace std;
#define INCLUDE_ALL

#else
#undef EXPORT
#define EXPORT
#endif


#if defined INCLUDE_ALL || defined INCLUDE_INIT_TLWESAMPLE_FFT
#undef INCLUDE_INIT_TLWESAMPLE_FFT
EXPORT void init_TLweSampleFFT(TLweSampleFFT* obj, const TLweParams* params) {
    //a is a table of k+1 polynomials, b is an alias for &a[k]
    const int k = params->k;
    LagrangeHalfCPolynomial* a = new_LagrangeHalfCPolynomial_array(k+1, params->N);
    double current_variance = 0;
    new(obj) TLweSampleFFT(params, a, current_variance);
}
#endif

#if defined INCLUDE_ALL || defined INCLUDE_DESTROY_TLWESAMPLE_FFT
#undef INCLUDE_DESTROY_TLWESAMPLE_FFT
EXPORT void destroy_TLweSampleFFT(TLweSampleFFT* obj) {
    const int k = obj->k;
    delete_LagrangeHalfCPolynomial_array(k+1, obj->a);
    obj->~TLweSampleFFT();
}
#endif


#if defined INCLUDE_ALL || defined INCLUDE_TLWE_TO_FFT_CONVERT
#undef INCLUDE_TLWE_TO_FFT_CONVERT
// Computes the inverse FFT of the coefficients of the TLWE sample
EXPORT void tLweToFFTConvert(TLweSampleFFT* result, const TLweSample* source, const TLweParams* params){
    const int k = params->k;

    for (int i = 0; i <= k; ++i)
	TorusPolynomial_ifft(result->a+i,source->a+i);
    result->current_variance=source->current_variance;
}
#endif


#if defined INCLUDE_ALL || defined INCLUDE_TLWE_FROM_FFT_CONVERT
#undef INCLUDE_TLWE_FROM_FFT_CONVERT
// Computes the FFT of the coefficients of the TLWEfft sample
EXPORT void tLweFromFFTConvert(TLweSample* result, const TLweSampleFFT* source, const TLweParams* params){
    const int k = params->k;

    for (int i = 0; i <= k; ++i)
	TorusPolynomial_fft(result->a+i,source->a+i);
    result->current_variance=source->current_variance;
}
#endif


#if defined INCLUDE_ALL || defined INCLUDE_TLWE_FFT_CLEAR
#undef INCLUDE_TLWE_FFT_CLEAR
//Arithmetic operations on TLwe samples
/** result = (0,0) */
EXPORT void tLweFFTClear(TLweSampleFFT* result, const TLweParams* params){
    int k = params->k;

    for (int i = 0; i <= k; ++i) 
	LagrangeHalfCPolynomialClear(&result->a[i]);
    result->current_variance = 0.;
}
#endif


#if defined INCLUDE_ALL || defined INCLUDE_TLWE_FFT_ADDMULRTO
#undef INCLUDE_TLWE_FFT_ADDMULRTO
// result = result + p*sample
EXPORT void tLweFFTAddMulRTo(TLweSampleFFT* result, const LagrangeHalfCPolynomial* p, const TLweSampleFFT* sample, const TLweParams* params) {
    const int k = params->k;

    for (int i=0; i<=k; i++)
	LagrangeHalfCPolynomialAddMul(result->a+i,p,sample->a+i);
    //result->current_variance += sample->current_variance; 
    //TODO: how to compute the variance correctly?
}
#endif


//autogenerated memory functions (they will always be included, even in
//tests)


//free memory space for a LweSampleFFT
EXPORT TLweSampleFFT* alloc_TLweSampleFFT() {
    return (TLweSampleFFT*) malloc(sizeof(TLweSampleFFT));
}

EXPORT TLweSampleFFT* alloc_TLweSampleFFT_array(int nbelts) {
    return (TLweSampleFFT*) malloc(nbelts*sizeof(TLweSampleFFT));
}

//free memory space for a TLweSampleFFT
EXPORT void free_TLweSampleFFT(TLweSampleFFT* ptr) {
    free(ptr);
}

EXPORT void free_TLweSampleFFT_array(int nbelts, TLweSampleFFT* ptr) {
    free(ptr);
}

//initialize the structure
//(equivalent of the C++ constructor)
EXPORT void init_TLweSampleFFT_array(int nbelts, TLweSampleFFT* obj, const TLweParams* params) {
    for (int i=0; i<nbelts; i++) {
	init_TLweSampleFFT(obj, params);
    }
}

//destroys the TLweSampleFFT structure
EXPORT void destroy_TLweSampleFFT_array(int nbelts, TLweSampleFFT* obj) {
    for (int i=0; i<nbelts; i++) {
	(obj+i)->~TLweSampleFFT();
    }
}

//allocates and initialize the TLweSampleFFT structure
//(equivalent of the C++ new)
EXPORT TLweSampleFFT* new_TLweSampleFFT(const TLweParams* params) {
    TLweSampleFFT* obj = alloc_TLweSampleFFT();
    init_TLweSampleFFT(obj,params);
    return obj;
}
EXPORT TLweSampleFFT* new_TLweSampleFFT_array(int nbelts, const TLweParams* params) {
    TLweSampleFFT* obj = alloc_TLweSampleFFT_array(nbelts);
    init_TLweSampleFFT_array(nbelts,obj,params);
    return obj;
}

//destroys and frees the TLweSampleFFT structure
//(equivalent of the C++ delete)
EXPORT void delete_TLweSampleFFT(TLweSampleFFT* obj) {
    destroy_TLweSampleFFT(obj);
    free(obj);
}
EXPORT void delete_TLweSampleFFT_array(int nbelts, TLweSampleFFT* obj) {
    destroy_TLweSampleFFT_array(nbelts,obj);
    free_TLweSampleFFT_array(nbelts,obj);
}

#undef INCLUDE_ALL
